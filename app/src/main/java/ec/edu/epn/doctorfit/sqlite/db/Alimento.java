package ec.edu.epn.doctorfit.sqlite.db;

import ec.edu.epn.doctorfit.sqlite.db.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "ALIMENTO".
 */
public class Alimento {

    private Long id;
    /** Not-null value. */
    private String nombreAlimento;
    /** Not-null value. */
    private String aporteNutricional;
    private float porcentajeNutricional;
    /** Not-null value. */
    private String tipoAlimento;
    private long idPlatillo;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient AlimentoDao myDao;

    private Usuario usuario;
    private Long usuario__resolvedKey;


    public Alimento() {
    }

    public Alimento(Long id) {
        this.id = id;
    }

    public Alimento(Long id, String nombreAlimento, String aporteNutricional, float porcentajeNutricional, String tipoAlimento, long idPlatillo) {
        this.id = id;
        this.nombreAlimento = nombreAlimento;
        this.aporteNutricional = aporteNutricional;
        this.porcentajeNutricional = porcentajeNutricional;
        this.tipoAlimento = tipoAlimento;
        this.idPlatillo = idPlatillo;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getAlimentoDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getNombreAlimento() {
        return nombreAlimento;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setNombreAlimento(String nombreAlimento) {
        this.nombreAlimento = nombreAlimento;
    }

    /** Not-null value. */
    public String getAporteNutricional() {
        return aporteNutricional;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setAporteNutricional(String aporteNutricional) {
        this.aporteNutricional = aporteNutricional;
    }

    public float getPorcentajeNutricional() {
        return porcentajeNutricional;
    }

    public void setPorcentajeNutricional(float porcentajeNutricional) {
        this.porcentajeNutricional = porcentajeNutricional;
    }

    /** Not-null value. */
    public String getTipoAlimento() {
        return tipoAlimento;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setTipoAlimento(String tipoAlimento) {
        this.tipoAlimento = tipoAlimento;
    }

    public long getIdPlatillo() {
        return idPlatillo;
    }

    public void setIdPlatillo(long idPlatillo) {
        this.idPlatillo = idPlatillo;
    }

    /** To-one relationship, resolved on first access. */
    public Usuario getUsuario() {
        long __key = this.idPlatillo;
        if (usuario__resolvedKey == null || !usuario__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UsuarioDao targetDao = daoSession.getUsuarioDao();
            Usuario usuarioNew = targetDao.load(__key);
            synchronized (this) {
                usuario = usuarioNew;
            	usuario__resolvedKey = __key;
            }
        }
        return usuario;
    }

    public void setUsuario(Usuario usuario) {
        if (usuario == null) {
            throw new DaoException("To-one property 'idPlatillo' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.usuario = usuario;
            idPlatillo = usuario.getId();
            usuario__resolvedKey = idPlatillo;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
