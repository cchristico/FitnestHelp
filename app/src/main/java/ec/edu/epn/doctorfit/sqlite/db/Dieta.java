package ec.edu.epn.doctorfit.sqlite.db;

import java.util.List;
import ec.edu.epn.doctorfit.sqlite.db.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "DIETA".
 */
public class Dieta {

    private Long id;
    /** Not-null value. */
    private String tipoDieta;
    private long idEstadoDeseado;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient DietaDao myDao;

    private EstadoDeseado estadoDeseado;
    private Long estadoDeseado__resolvedKey;

    private List<Platillo> platilloList;

    public Dieta() {
    }

    public Dieta(Long id) {
        this.id = id;
    }

    public Dieta(Long id, String tipoDieta, long idEstadoDeseado) {
        this.id = id;
        this.tipoDieta = tipoDieta;
        this.idEstadoDeseado = idEstadoDeseado;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDietaDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getTipoDieta() {
        return tipoDieta;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setTipoDieta(String tipoDieta) {
        this.tipoDieta = tipoDieta;
    }

    public long getIdEstadoDeseado() {
        return idEstadoDeseado;
    }

    public void setIdEstadoDeseado(long idEstadoDeseado) {
        this.idEstadoDeseado = idEstadoDeseado;
    }

    /** To-one relationship, resolved on first access. */
    public EstadoDeseado getEstadoDeseado() {
        long __key = this.idEstadoDeseado;
        if (estadoDeseado__resolvedKey == null || !estadoDeseado__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            EstadoDeseadoDao targetDao = daoSession.getEstadoDeseadoDao();
            EstadoDeseado estadoDeseadoNew = targetDao.load(__key);
            synchronized (this) {
                estadoDeseado = estadoDeseadoNew;
            	estadoDeseado__resolvedKey = __key;
            }
        }
        return estadoDeseado;
    }

    public void setEstadoDeseado(EstadoDeseado estadoDeseado) {
        if (estadoDeseado == null) {
            throw new DaoException("To-one property 'idEstadoDeseado' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.estadoDeseado = estadoDeseado;
            idEstadoDeseado = estadoDeseado.getId();
            estadoDeseado__resolvedKey = idEstadoDeseado;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Platillo> getPlatilloList() {
        if (platilloList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PlatilloDao targetDao = daoSession.getPlatilloDao();
            List<Platillo> platilloListNew = targetDao._queryDieta_PlatilloList(id);
            synchronized (this) {
                if(platilloList == null) {
                    platilloList = platilloListNew;
                }
            }
        }
        return platilloList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetPlatilloList() {
        platilloList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
